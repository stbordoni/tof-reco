//
// Created by E. Villa on Mar 28th, 2023. 
// emanuele.villa@cern.ch
// 

#ifndef TofObjects_h
#define TofObjects_h

#include <stdlib.h>
#include <vector>
#include <string>
#include <nlohmann/json.hpp>
#include <iostream>
#include <fstream>
#include <sstream>

// Conventions
// - functions and variables are in Pascal case
// - appo variables inside of functions are in snake_case
// - variables and functions of a class always start with the name of the class, without Tof
// Note that classes are nested in mother daughter relations


// Simple function to split strings, might move elsewhere
std::vector<std::string> SplitString(const std::string &, char);


// // Forward declaration of classes
// class TofHit;
// class TofSignal;
// class TofEvent;
// class TofRun;


////////////////////////////////////////////////////////////////////
// TofSignal class
////////////////////////////////////////////////////////////////////


class TofSignal: public TofHit{
public:
    // constructor
    TofSignal();
    ~TofSignal(){};

    // variables
    bool SignalBothEdges;
    // vector of hits or this, choose
    TofHit HitLeft; 
    TofHit HitRight; 
    std::vector <TofHit> HitsList;
    
    // functions
    void SignalQualityCheck();

};

////////////////////////////////////////////////////////////////////
// TofEvent class
////////////////////////////////////////////////////////////////////


class TofEvent: public TofSignal{
public: 
    
    // variables
    int EventSize; // number of signals in event, add also hits?

    // Constructor
    TofEvent();
    ~TofEvent(){};
    std::vector <TofSignal> SignalsList;

};



////////////////////////////////////////////////////////////////////
// TofHit class
////////////////////////////////////////////////////////////////////

class TofHit{
public: 
    // Variables
    int HitId;
    int HitFeb;
    int HitSampic;
    int HitFebChannel;
    int HitDaqChannel;
    int HitChannelOnPlane; // might remove
    int HitPlane; // dictionary is U=0, D=1, T=2, B=3, L=4, R=5
    int HitBar;
    int HitEdge; // 0 is L, 1 is R
    double HitUnixTime;
    double HitCell0Time;
    double HitTime;
    double HitTOTValue;
    double HitRawTOTValue;
    double HitRawPeak;
    std::vector<double> HitWaveform;
    double HitBaseline;
    double HitVoltageIntegral;
    double HitPeak;
    int HitPeakSample;
    double HitPeakTime;
    std::vector<double> HitPeakFractionSampleLinearInt;
    std::vector<double> HitPeakFractionTimeLinearInt;
    std::vector<double> HitPeakFractionSampleSplineInt;
    std::vector<double> HitPeakFractionTimeSplineInt;

    std::vector <std::string> HitErrorsList; // check if better to have only RunErrors
    
    
    // Constructor
    TofHit();
    ~TofHit(){};

    // Functions
    void HitComputeVariables();
    void HitFitWaveform();
    void HitComputeCF();
    void HitQualityCheck();
    void HitMatchDaqChToTofCh();
    char HitGetPlaneId();

private: 
    // check if to make some variables private 
};



////////////////////////////////////////////////////////////////////
// TofRun class
////////////////////////////////////////////////////////////////////

// TofRun includes the Run settings and all the elements
class TofRun: public TofHit{
public:

    // Sampic hardware details
    static const int nFebsMax = 4;               
    static const int nSampicsPerFeb = 4;         
    static const int nChannelsPerSampic = 16;    
    static const int nChannelsPerFeb = nSampicsPerFeb*nChannelsPerSampic;
    static const int nChannels = nChannelsPerFeb*nFebsMax;

    // Run details
    std::string RunSoftware;
    std::string RunPath; // this will be dependent on the local machine
    std::string RunAddress; // for linux its currently a file, for windows a folder
    std::vector<std::string> RunFebSerialNumber; // = {"1.12", "1.13", "1.18", "1.19"}; // when a board is missign what happens?
    std::vector<std::string> RunFebFirmwareVersion; // = {"1.12", "1.13", "1.18", "1.19"}; // when a board is missign what happens?
    std::string RunControllerBoardSerialNumber;
    std::string RunControllerBoardFirmwareVersion;
    int RunNumber;
    int RunDate; // format YearMonthDay
    int RunTime; // format HoursMinutes
    double RunUnixTime;
    int RunNFebs;
    int RunNSamplesToRead;
    double RunSamplingFrequency; // MHz
    double RunSampleLength; // ns
    double RunBaseline[nFebsMax][nSampicsPerFeb]; // V
    double RunPostTrig[nFebsMax][nSampicsPerFeb];
    double RunTrigThr[nChannels];

    // Constructors
    TofRun(std::string);         // Linux format
    ~TofRun(){};

    // Actual events, that are added only after creating the objects
    std::vector <TofHit> RunUnorderedHitsList;
    std::vector <TofEvent> RunEventsList;

    // Functions
    void RunSaveSettings_linux(std::string);
    void RunSaveSettings_windows(std::string);
    void RunGetSettings ();
    void RunQualityCheck();
    void RunLoadHits();
    void RunOrderHits();
    void RunCreateEvents();    // this can also free up space 

    // Settings for the analysis
    void RunSetAnalysisOptions ();
    void RunGetAnalysisOptions ();
    std::vector <std::string> RunErrorsList; // maybe not nice, learn about better methods
    void RunPrintErrors();


private:

    // Settings for analysis, we dont want to have them change midway through analysis
    bool RunSelectedAnalysisOptions; // false in constructor, set to true when SetAnalysisOptions is called succesfully
    std::string RunInterpolationType; // spline or linear, deafult is linear
    std::vector<double> RunHitPeakFraction = {0.05,0.10,0.20,0.30,0.40,0.50,0.60,0.70,0.90};
    int RunNSamplesInWaveform; // actual samples used, different for windows and linux
    int RunNSamplesToExclude; // default is 1
    int RunBaselineFirstSample = 0; // default, this is already after removing bad samples
    int RunBaselineNSamples; // default is 5
    bool RunDeleteUnorderedHitsList;
    

};
#endif